# Testing

## Why should you test

* to find (current and future) bugs earlier and more quickly (before you publish your results, ideally!)
* to have confidence in your current and future code
* (to document how you expect your code to behave)

## Why should you test your research code?

> "Second, a 15-year-old bug was found ... (the bug was fixed ... during preparation of this manuscript). The bug essentially reduced the size of the image searched for clusters, underestimating the severity of the multiplicity correction and overestimating significance ." 
[^cluster-failure]

[^cluster-failure]: [https://www.pnas.org/doi/full/10.1073/pnas.1602413113](https://www.pnas.org/doi/full/10.1073/pnas.1602413113)

## Why should you test your research code? {.smaller}

> "An __in-house__ data reduction program introduced a change in sign for anomalous differences.  
>
> This program, which was not part of a conventional data processing package, converted the anomalous pairs (I+ and I−) to (F− and F+), thereby introducing a sign change.  
> 
> We very sincerely regret the confusion that these papers have caused and, in particular, subsequent research efforts that were unproductive as a result of our original findings." [^science-retraction]

[^science-retraction]: [https://www.science.org/doi/10.1126/science.314.5807.1875b](https://www.science.org/doi/10.1126/science.314.5807.1875b)

## Why should you test you research code?

> "...basically, I forgot to set something to zero after I finished looping through the loop that moved the motor [and that caused a fire in the lab]"[^fire-lab]

[^fire-lab]: [https://software.ac.uk/news/software-horror-stories-fire-lab](https://software.ac.uk/news/software-horror-stories-fire-lab)

## What things should we sanity check about the `calculate_fastest_time` function?

```{.python}
def calculate_fastest_time(time_list):
    fastest_time = time_list[0]
    for time in time_list:
        if time > fastest_time:
            fastest_time = time
    return fastest_time
```

## What things should we sanity check about the `calculate_fastest_time` function?

{{< include slides/mentimeter.qmd >}}

## Demo: write some sanity checks

Switch to VS Code

{{< include slides/mentimeter.qmd >}}

## Testing with pytest

A neater way to run sanity checks

```{.python}
import .calculate_fastest_time

def test_fastest_time_in_a_specific_case():
    ...
    result = ...
    expected = ...
    assert result == expected
```

## Exercise: convert a sanity check into a test

[Testing exercise](https://github.com/{{< meta exercises.org-repo >}}/issues/2)


## How to think about what to test

What we've called sanity checks are referred to as "test cases".
Try to cover all "edge" cases[^2]: what happens if ...?  

* I pass an invalid input ("zero")  
* I pass a simplest possible input ("one")  
* I run the code several times ("two")  
* I pass a typical input ("two to max-1")  
* I pass the extremest allowable input ("max")  
* I pass a too extreme input ("max+1")  

[^2]: [A Beginner’s Guide to Testing: Error Handling Edge Cases](https://www.freecodecamp.org/news/a-beginners-guide-to-testing-implement-these-quick-checks-to-test-your-code-d50027ad5eed/)


## How to think about what to test {.smaller}

What we've called sanity checks are referred to as "test cases".
For example, what happens/should happen when you call...?

* `calculate_fastest_time("this is a string")` ("zero")
* `calculate_fastest_time([1.0])` ("one")  
* `calculate_fastest_time([1.0]); calculate_fastest_time([2.0])` ("two")  
* `calculate_fastest_time([1.0, 0.5, 2.0])` ("two to max-1")  
* `calculate_fastest_time([1.0, 0.5, 2.0, sys.float_info.max])` ("max")  
* `calculate_fastest_time([1.0, 0.5, 2.0, float("inf")])` ("max+1")  

## Some software testing vocabulary

Testing at different levels

* unit tests: tests one function
* integration tests: tests several functions work together as expected
* end-to-end tests: tests an entire pipeline from start to finish

## Some software testing vocabulary

Types of test:

* negative test: test that the expected error is raised when bad input is passed
* regression test: test that behaviour hasn't changed 

## Be careful

No matter how much you test, things can still go wrong! (and it's [OK to make mistakes](https://coding-confessions.github.io/)!)

> “Program testing can be used to show the presence of bugs, but never to show their absence!”
― [Edsger W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra)

* [Therac-25](https://en.wikipedia.org/wiki/Therac-25)