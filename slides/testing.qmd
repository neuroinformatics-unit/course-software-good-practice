## Testing


## Why should you test your research code?

> "Second, a 15-year-old bug was found ... (the bug was fixed ... during preparation of this manuscript). The bug essentially reduced the size of the image searched for clusters, underestimating the severity of the multiplicity correction and overestimating significance ." 
[^cluster-failure]

[^cluster-failure]: [https://www.pnas.org/doi/full/10.1073/pnas.1602413113](https://www.pnas.org/doi/full/10.1073/pnas.1602413113)

## Why should you test your research code? {.smaller}

> "An in-house data reduction program introduced a change in sign for anomalous differences.  
>
> This program, which was not part of a conventional data processing package, converted the anomalous pairs (I+ and I−) to (F− and F+), thereby introducing a sign change.  
> 
> We very sincerely regret the confusion that these papers have caused and, in particular, subsequent research efforts that were unproductive as a result of our original findings." [^science-retraction]

[^science-retraction]: [https://www.science.org/doi/10.1126/science.314.5807.1875b](https://www.science.org/doi/10.1126/science.314.5807.1875b)

## Why should you test you research code?

> "...basically, I forgot to set something to zero after I finished looping through the loop that moved the motor [and that caused a fire in the lab]"[^fire-lab]

[^fire-lab]: [https://software.ac.uk/news/software-horror-stories-fire-lab](https://software.ac.uk/news/software-horror-stories-fire-lab)

## What things should we sanity check about this code?

```{.python}
def time_range(
    start_time, end_time, number_of_intervals=1, gap_between_intervals_s=0
):
    """
    Example:
    >>> time_range("2010-01-12 10:00:00", "2010-01-12 12:00:00", 2, 60)
    [('2010-01-12 10:00:00', '2010-01-12 12:00:00')]
    """
    ...

def compute_overlap_time(range1, range2):
    overlap_time = []
    for start1, end1 in range1:
        for start2, end2 in range2:
            low = max(start1, start2)
            high = min(end1, end2)
            overlap_time.append((low, high))
    return overlap_time
```

## What things should we sanity check about this code?

{{< include slides/mentimeter.qmd >}}

## Exercise: write some sanity checks

::: {style="text-align: center; margin-top: 1em"}
[Exercise: write some sanity tests](https://github.com/neuroinformatics-unit/rse-good-practice-playground/issues/2)
:::

## Testing with pytest

A neater way to run sanity checks

```{.python}
import time_range
import compute_overlap_time

# pytest will pick up any function starting with "test"
def test_simple_overlap():
    long = time_range("2010-01-12 10:00:00", "2010-01-12 12:00:00")
    short = time_range("2010-01-12 10:30:00", "2010-01-12 10:45:00")
    expected_overlap = [('2010-01-12 10:30:00', '2010-01-12 10:45:00')]
    assert compute_overlap_time(long, short) == expected 
```

## Exercise: convert a sanity check into a test

[Testing exercise](https://github.com/neuroinformatics-unit/rse-good-practice-playground/issues/2)

## Why should you test

* to find (current and future) bugs earlier and more quickly (before you publish your results, ideally!)
* to have confidence in your code changes
* (to document how you expect your code to behave)


## How to think about what to test

What we've called sanity checks are referred to as "test cases".
Try to cover all "edge" cases[^2]: what happens if ...?  

* I pass an invalid input ("zero")  
* I pass a simplest possible input ("one")  
* I run the code several times ("two")  
* I pass a typical input ("two to max-1")  
* I pass the extremest allowable input ("max")  
* I pass a too extreme input ("max+1")  

[^2]: [A Beginner’s Guide to Testing: Error Handling Edge Cases](https://www.freecodecamp.org/news/a-beginners-guide-to-testing-implement-these-quick-checks-to-test-your-code-d50027ad5eed/)

## Some software testing vocabulary

Testing at different levels

* unit tests: tests one function
* integration tests: tests several functions work together as expected
* end-to-end tests: tests an entire pipeline from start to finish

## Some software testing vocabulary

Types of test:

* negative test: test that the expected error is raised when bad input is passed
* regression test: test that behaviour hasn't changed 

## Be careful

No matter how much you test, things can still go wrong! (and it's [OK to make mistakes](https://coding-confessions.github.io/)!)

> “Program testing can be used to show the presence of bugs, but never to show their absence!”
― [Edsger W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra)

* [Therac-25](https://en.wikipedia.org/wiki/Therac-25)

## Testing resources

* [Pytest docs](https://docs.pytest.org/en/7.3.x/)